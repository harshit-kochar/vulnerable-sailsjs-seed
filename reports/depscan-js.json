{"id": "CVE-2019-1010266", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.11", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nlodash prior to 4.7.11 is affected by: CWE 400: Uncontrolled Resource Consumption. The impact is: Denial of service. The component is: Date handler. The attack vector is: Attacker provides very long strings, which the library attempts to match using a regular expression. The fixed version is: 4.7.11.\nUpgrade to version 4.17.11 or later", "related_urls": [], "occurrence_count": 798, "reachable_flows": 0}
{"id": "NPM-1085693", "package": "npm:underscore.string", "purl": "pkg:npm/underscore.string@3.2.3", "package_type": "npm", "package_usage": "required", "version": "3.2.3", "fix_version": "3.3.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in underscore.string\nVersions of `underscore.string` prior to *3.3.5* are vulnerable to Regular Expression Denial of Service (ReDoS).\n\nThe function `unescapeHTML` is vulnerable to ReDoS due to an overly broad regex. The slowdown is approximately 2s for 50,000 characters but grows exponentially with larger inputs.\n\n\n## Recommendation\n\nUpgrade to version 3.3.5 or higher.\nUpgrade to version 3.3.5 or later", "related_urls": [], "occurrence_count": 3, "reachable_flows": 0}
{"id": "NPM-1085724", "package": "npm:js-yaml", "purl": "pkg:npm/js-yaml@3.14.1", "package_type": "npm", "package_usage": "required", "version": "3.14.1", "fix_version": "3.13.0", "severity": "MEDIUM", "cvss_score": "5.9", "short_description": "# Denial of Service in js yaml\nVersions of `js yaml` prior to 3.13.0 are vulnerable to Denial of Service. By parsing a carefully crafted YAML file, the node process stalls and may exhaust system resources leading to a Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 3.13.0.\nUpgrade to version 3.13.0 or later", "related_urls": [], "occurrence_count": 10, "reachable_flows": 0}
{"id": "CVE-2020-7662", "package": "npm:websocket-extensions", "purl": "pkg:npm/websocket-extensions@0.1.3", "package_type": "npm", "package_usage": "required", "version": "0.1.3", "fix_version": "0.1.4", "severity": "HIGH", "cvss_score": "8.2", "short_description": "# Regular Expression Denial of Service in websocket extensions (NPM package)\n### Impact\n\nThe ReDoS flaw allows an attacker to exhaust the server's capacity to process\nincoming requests by sending a WebSocket handshake request containing a header\nof the following form:\n\n\t\tSec WebSocket Extensions: a; b=\" c c c c c c c c c c ...\n\nThat is, a header containing an unclosed string parameter value whose content is\na repeating two byte sequence of a backslash and some other character. The\nparser takes exponential time to reject this header as invalid, and this will\nblock the processing of any other work on the same thread. Thus if you are\nrunning a single threaded server, such a request can render your service\ncompletely unavailable.\n\n### Patches\n\nUsers should upgrade to version 0.1.4.\n\n### Workarounds\n\nThere are no known work arounds other than disabling any public facing\nWebSocket functionality you are operating.\n\n### References\n\n\thttps://blog.jcoglan.com/2020/06/02/redos vulnerability in websocket extensions/\nUpgrade to version 0.1.4 or later", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2017-1000048", "package": "npm:qs", "purl": "pkg:npm/qs@6.11.0", "package_type": "npm", "package_usage": "required", "version": "6.11.0", "fix_version": "6.0.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution Protection Bypass in qs\nAffected version of `qs` are vulnerable to Prototype Pollution because it is possible to bypass the protection. The `qs.parse` function fails to properly prevent an object's prototype to be altered when parsing arbitrary input. Input containing `[` or ` ` may bypass the prototype pollution protection and alter the Object prototype. This allows attackers to override properties that will exist in all objects, which may lead to Denial of Service or Remote Code Execution in specific circumstances.\n\n\n## Recommendation\n\nUpgrade to 6.0.4, 6.1.2, 6.2.3, 6.3.2 or later.\nUpgrade to version 6.0.4 or later", "related_urls": [], "occurrence_count": 10, "reachable_flows": 0}
{"id": "CVE-2018-16492", "package": "npm:extend", "purl": "pkg:npm/extend@3.0.2", "package_type": "npm", "package_usage": "required", "version": "3.0.2", "fix_version": "3.0.2", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in extend\nVersions of `extend` prior to 3.0.2 (for 3.x) and 2.0.2 (for 2.x) are vulnerable to Prototype Pollution. The `extend()` function allows attackers to modify the prototype of Object causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nIf you're using `extend` 3.x upgrade to 3.0.2 or later.\nIf you're using `extend` 2.x upgrade to 2.0.2 or later.\nUpgrade to version 3.0.2 or later", "related_urls": [], "occurrence_count": 12, "reachable_flows": 0}
{"id": "CVE-2017-16042", "package": "npm:growl", "purl": "pkg:npm/growl@1.9.2", "package_type": "npm", "package_usage": "required", "version": "1.9.2", "fix_version": "1.10.0", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Growl before 1.10.0 vulnerable to Command Injection\nAffected versions of `growl` do not properly sanitize input prior to passing it into a shell command, allowing for arbitrary command execution.\n\n\n## Recommendation\n\nUpdate to version 1.10.0 or later.\nUpgrade to version 1.10.0 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2021-29469", "package": "npm:redis", "purl": "pkg:npm/redis@3.1.1", "package_type": "npm", "package_usage": "required", "version": "3.1.1", "fix_version": "3.1.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Node Redis potential exponential regex in monitor mode\n### Impact\nWhen a client is in monitoring mode, the regex begin used to detected monitor messages could cause exponential backtracking on some strings. This issue could lead to a denial of service.\n\n### Patches\nThe problem was fixed in commit [`2d11b6d` (https://github.com/NodeRedis/node redis/commit/2d11b6dc9b9774464a91fb4b448bad8bf699629e) and was released in version `3.1.1`.\n\n### References\n#1569 (GHSL 2021 026)\nUpgrade to version 3.1.1 or later", "related_urls": [], "occurrence_count": 7, "reachable_flows": 0}
{"id": "CVE-2018-3737", "package": "npm:sshpk", "purl": "pkg:npm/sshpk@1.18.0", "package_type": "npm", "package_usage": "required", "version": "1.18.0", "fix_version": "1.13.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in sshpk\nVersions of `sshpk` before 1.13.2 or 1.14.1 are vulnerable to regular expression denial of service when parsing crafted invalid public keys.\n\n\n## Recommendation\n\nUpdate to version 1.13.2, 1.14.1 or later.\nUpgrade to version 1.13.2 or later", "related_urls": [], "occurrence_count": 6, "reachable_flows": 0}
{"id": "CVE-2020-36048", "package": "npm:engine.io", "purl": "pkg:npm/engine.io@3.1.5", "package_type": "npm", "package_usage": "required", "version": "3.1.5", "fix_version": "3.6.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Resource exhaustion in engine.io\nEngine.IO before 4.0.0 and 3.6.0 allows attackers to cause a denial of service (resource consumption) via a POST request to the long polling transport.\nUpgrade to version 3.6.0 or later", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2022-41940", "package": "npm:engine.io", "purl": "pkg:npm/engine.io@3.1.5", "package_type": "npm", "package_usage": "required", "version": "3.1.5", "fix_version": "3.6.1", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Uncaught exception in engine.io\n### Impact\n\nA specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process.\n\n```\nevents.js:292\n\t\t\tthrow er; // Unhandled 'error' event\n\t\t\t \n\nError: read ECONNRESET\n\t\tat TCP.onStreamRead (internal/stream_base_commons.js:209:20)\nEmitted 'error' event on Socket instance at:\n\t\tat emitErrorNT (internal/streams/destroy.js:106:8)\n\t\tat emitErrorCloseNT (internal/streams/destroy.js:74:3)\n\t\tat processTicksAndRejections (internal/process/task_queues.js:80:21) {\n\terrno:\t104,\n\tcode: 'ECONNRESET',\n\tsyscall: 'read'\n}\n```\n\nThis impacts all the users of the [`engine.io` (https://www.npmjs.com/package/engine.io) package, including those who uses depending packages like [`socket.io` (https://www.npmjs.com/package/socket.io).\n\n### Patches\n\nA fix has been released today (2022/11/20):\n\n| Version range\t\t | Fixed version |\n|\t\t\t\t\t\t\t\t\t |\t\t\t\t\t\t\t |\n| `engine.io@3.x.y` | `3.6.1`\t\t\t |\n| `engine.io@6.x.y` | `6.2.1`\t\t\t |\n\nFor `socket.io` users:\n\n| Version range\t\t\t\t\t\t\t | `engine.io` version | Needs minor update?\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n|\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\t\t\t\t\t\t\t\t\t\t |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `socket.io@4.5.x`\t\t\t\t\t | `~6.2.0`\t\t\t\t\t\t| `npm audit fix` should be sufficient\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n| `socket.io@4.4.x`\t\t\t\t\t | `~6.1.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `socket.io@4.3.x`\t\t\t\t\t | `~6.0.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `socket.io@4.2.x`\t\t\t\t\t | `~5.2.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `socket.io@4.1.x`\t\t\t\t\t | `~5.1.1`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `socket.io@4.0.x`\t\t\t\t\t | `~5.0.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `socket.io@3.1.x`\t\t\t\t\t | `~4.1.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x` (see [here (https://socket.io/docs/v4/migrating from 3 x to 4 0/)) |\n| `socket.io@3.0.x`\t\t\t\t\t | `~4.0.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x` (see [here (https://socket.io/docs/v4/migrating from 3 x to 4 0/)) |\n| `socket.io@2.5.0`\t\t\t\t\t | `~3.6.0`\t\t\t\t\t\t| `npm audit fix` should be sufficient\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n| `socket.io@2.4.x` and below | `~3.5.0`\t\t\t\t\t\t| Please upgrade to `socket.io@2.5.0`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n\n### Workarounds\n\nThere is no known workaround except upgrading to a safe version.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [`engine.io` (https://github.com/socketio/engine.io)\n\nThanks to [Jonathan Neve (https://github.com/jonathanneve) for the responsible disclosure.\n\nUpgrade to version 3.6.1 or later", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2020-36049", "package": "npm:socket.io-parser", "purl": "pkg:npm/socket.io-parser@3.1.3", "package_type": "npm", "package_usage": "required", "version": "3.1.3", "fix_version": "3.3.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Resource exhaustion in socket.io parser\nThe `socket.io parser` npm package before versions 3.3.2 and 3.4.1 allows attackers to cause a denial of service (memory consumption) via a large packet because a concatenation approach is used.\nUpgrade to version 3.3.2 or later", "related_urls": [], "occurrence_count": 7, "reachable_flows": 0}
{"id": "CVE-2021-23362", "package": "npm:hosted-git-info", "purl": "pkg:npm/hosted-git-info@2.8.9", "package_type": "npm", "package_usage": "required", "version": "2.8.9", "fix_version": "2.8.9", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Regular Expression Denial of Service in hosted git info\nThe npm package `hosted git info` before 3.0.8 are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression shortcutMatch in the fromUrl function in index.js. The affected regular expression exhibits polynomial worst case time complexity\nUpgrade to version 2.8.9 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2020-7729", "package": "npm:grunt", "purl": "pkg:npm/grunt@1.0.1", "package_type": "npm", "package_usage": "optional", "version": "1.0.1", "fix_version": "1.5.3", "severity": "HIGH", "cvss_score": "7.1", "short_description": "# Arbitrary Code Execution in grunt\nThe package grunt before 1.3.0 are vulnerable to Arbitrary Code Execution due to the default usage of the function load() instead of its secure replacement safeLoad() of the package js yaml inside grunt.file.readYAML.\nUpgrade to version 1.3.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-28918", "package": "npm:netmask", "purl": "pkg:npm/netmask@1.0.6", "package_type": "npm", "package_usage": "required", "version": "1.0.6", "fix_version": "1.1.0", "severity": "CRITICAL", "cvss_score": "9.1", "short_description": "# Improper parsing of octal bytes in netmask\nImproper input validation of octal strings in netmask npm package v1.0.6 and below allows unauthenticated remote attackers to perform indeterminate SSRF, RFI, and LFI attacks on many of the dependent packages. A remote unauthenticated attacker can bypass packages relying on netmask to filter IPs and reach critical VPN or LAN hosts.\n\n:exclamation: NOTE: The fix for this issue was incomplete. A subsequent fix was made in version `2.0.1` which was assigned [CVE 2021 29418 / GHSA pch5 whg9 qr2r (https://github.com/advisories/GHSA pch5 whg9 qr2r). For complete protection from this vulnerability an upgrade to version 2.0.1 or later is recommended.\nUpgrade to version 1.1.0 or later", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2018-21270", "package": "npm:stringstream", "purl": "pkg:npm/stringstream@0.0.6", "package_type": "npm", "package_usage": "required", "version": "0.0.6", "fix_version": "0.0.6", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Out of bounds Read in stringstream\nAll versions of `stringstream` are vulnerable to out of bounds read as it allocates uninitialized Buffers when number is passed in input stream on Node.js 4.x and below.\n\n\n## Recommendation\n\nNo fix is currently available for this vulnerability. It is our recommendation to not install or use this module if user input is being passed in to `stringstream`.\nUpgrade to version 0.0.6 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2021-23406", "package": "npm:pac-resolver", "purl": "pkg:npm/pac-resolver@3.0.0", "package_type": "npm", "package_usage": "required", "version": "3.0.0", "fix_version": "5.0.0", "severity": "HIGH", "cvss_score": "8.1", "short_description": "# Code Injection in pac resolver\nThis affects the package pac resolver before 5.0.0. This can occur when used with untrusted input, due to unsafe PAC file handling. **NOTE:** The fix for this vulnerability is applied in the node degenerator library, a dependency written by the same maintainer.\nUpgrade to version 5.0.0 or later", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2021-23406", "package": "npm:degenerator", "purl": "pkg:npm/degenerator@1.0.4", "package_type": "npm", "package_usage": "required", "version": "1.0.4", "fix_version": "3.0.1", "severity": "HIGH", "cvss_score": "8.1", "short_description": "# Code Injection in pac resolver\nThis affects the package pac resolver before 5.0.0. This can occur when used with untrusted input, due to unsafe PAC file handling. **NOTE:** The fix for this vulnerability is applied in the node degenerator library, a dependency written by the same maintainer.\nUpgrade to version 3.0.1 or later", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2022-1537", "package": "npm:grunt", "purl": "pkg:npm/grunt@1.0.1", "package_type": "npm", "package_usage": "optional", "version": "1.0.1", "fix_version": "1.5.3", "severity": "HIGH", "cvss_score": "7.0", "short_description": "# Race Condition in Grunt\nfile.copy operations in GruntJS are vulnerable to a TOCTOU race condition leading to arbitrary file write in GitHub repository gruntjs/grunt prior to 1.5.3. This vulnerability is capable of arbitrary file writes which can lead to local privilege escalation to the GruntJS user if a lower privileged user has write access to both source and destination directories as the lower privileged user can create a symlink to the GruntJS user's .bashrc file or replace /etc/shadow file if the GruntJS user is root.\nUpgrade to version 1.5.3 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-0436", "package": "npm:grunt", "purl": "pkg:npm/grunt@1.0.1", "package_type": "npm", "package_usage": "optional", "version": "1.0.1", "fix_version": "1.5.3", "severity": "MEDIUM", "cvss_score": "5.5", "short_description": "# Path Traversal in Grunt\nGrunt prior to version 1.5.2 is vulnerable to path traversal.\nUpgrade to version 1.5.2 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "NPM-1091669", "package": "npm:clean-css", "purl": "pkg:npm/clean-css@3.4.28", "package_type": "npm", "package_usage": "required", "version": "3.4.28", "fix_version": "4.1.11", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Regular Expression Denial of Service in clean css\nVersion of `clean css` prior to 4.1.11 are vulnerable to Regular Expression Denial of Service (ReDoS). Untrusted input may cause catastrophic backtracking while matching regular expressions. This can cause the application to be unresponsive leading to Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 4.1.11 or higher.\nUpgrade to version 4.1.11 or later", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2021-23395", "package": "npm:nedb", "purl": "pkg:npm/nedb@1.8.0", "package_type": "npm", "package_usage": "required", "version": "1.8.0", "fix_version": null, "severity": "HIGH", "cvss_score": "7.3", "short_description": "# Prototype Pollution in nedb\nThis affects all versions of package nedb. The library could be tricked into adding or modifying properties of Object.prototype using a __proto__ or constructor.prototype payload.\nNone", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2020-28282", "package": "npm:getobject", "purl": "pkg:npm/getobject@0.1.0", "package_type": "npm", "package_usage": "required", "version": "0.1.0", "fix_version": "1.0.0", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Prototype pollution in getobject\nPrototype pollution vulnerability in 'getobject' version 0.1.0 allows an attacker to cause a denial of service and may lead to remote code execution.\nUpgrade to version 1.0.0 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2021-29418", "package": "npm:netmask", "purl": "pkg:npm/netmask@1.0.6", "package_type": "npm", "package_usage": "required", "version": "1.0.6", "fix_version": "2.0.1", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# netmask npm package mishandles octal input data\nThe netmask package before 2.0.1 for Node.js mishandles certain unexpected characters in an IP address string, such as an octal digit of 9. This (in some situations) allows attackers to bypass access control that is based on IP addresses. NOTE: this issue exists because of an incomplete fix for CVE 2021 28918.\nUpgrade to version 2.0.1 or later", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2020-28481", "package": "npm:socket.io", "purl": "pkg:npm/socket.io@2.0.3", "package_type": "npm", "package_usage": "required", "version": "2.0.3", "fix_version": "2.5.1", "severity": "MEDIUM", "cvss_score": "4.3", "short_description": "# CORS misconfiguration in socket.io\nThe package socket.io before 2.4.0 are vulnerable to Insecure Defaults due to CORS Misconfiguration. All domains are whitelisted by default.\nUpgrade to version 2.4.0 or later", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2020-11022", "package": "npm:jquery", "purl": "pkg:npm/jquery@3.2.1", "package_type": "npm", "package_usage": "required", "version": "3.2.1", "fix_version": "3.5.0", "severity": "MEDIUM", "cvss_score": "6.9", "short_description": "# Potential XSS vulnerability in jQuery\n### Impact\nPassing HTML from untrusted sources\t even after sanitizing it\t to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\n\n### Patches\nThis problem is patched in jQuery 3.5.0.\n\n### Workarounds\nTo workaround the issue without upgrading, adding the following to your code:\n\n```js\njQuery.htmlPrefilter = function( html ) {\n\treturn html;\n};\n```\n\nYou need to use at least jQuery 1.12/2.2 or newer to be able to apply this workaround.\n\n### References\nhttps://blog.jquery.com/2020/04/10/jquery 3 5 0 released/\nhttps://jquery.com/upgrade guide/3.5/\n\n### For more information\nIf you have any questions or comments about this advisory, search for a relevant issue in [the jQuery repo (https://github.com/jquery/jquery/issues). If you don't find an answer, open a new issue.\nUpgrade to version 3.5.0 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2017-20162", "package": "npm:ms", "purl": "pkg:npm/ms@2.0.0", "package_type": "npm", "package_usage": "required", "version": "2.0.0", "fix_version": "2.0.0", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Vercel ms Inefficient Regular Expression Complexity vulnerability\nA vulnerability, which was classified as problematic, has been found in vercel ms up to 1.x. This issue affects the function parse of the file index.js. The manipulation of the argument str leads to inefficient regular expression complexity. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 2.0.0 is able to address this issue. The name of the patch is caae2988ba2a37765d055c4eee63d383320ee662. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB 217451.\nUpgrade to version 2.0.0 or later", "related_urls": [], "occurrence_count": 22, "reachable_flows": 0}
{"id": "CVE-2017-20165", "package": "npm:debug", "purl": "pkg:npm/debug@2.6.9", "package_type": "npm", "package_usage": "required", "version": "2.6.9", "fix_version": "2.6.9", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# debug Inefficient Regular Expression Complexity vulnerability\nA vulnerability classified as problematic has been found in debug js debug up to 3.0.x. This affects the function useColors of the file src/node.js. The manipulation of the argument str leads to inefficient regular expression complexity. Upgrading to version 3.1.0 is able to address this issue. The name of the patch is c38a0166c266a679c8de012d4eaccec3f944e685. It is recommended to upgrade the affected component. The identifier VDB 217665 was assigned to this vulnerability. The patch has been backported to the 2.6.x branch in version 2.6.9.\nUpgrade to version 2.6.9 or later", "related_urls": [], "occurrence_count": 107, "reachable_flows": 0}
{"id": "CVE-2018-16487", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.11", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in lodash\nVersions of `lodash` before 4.17.11 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.17.11 or later.\nUpgrade to version 4.17.11 or later", "related_urls": [], "occurrence_count": 798, "reachable_flows": 0}
{"id": "CVE-2020-28500", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.21", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nAll versions of package lodash prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions. \n\nSteps to reproduce (provided by reporter Liyuan Chen):\n```js\nvar lo = require('lodash');\n\nfunction build_blank(n) {\n\t\tvar ret = \"1\"\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tret += \" \"\n\t\t}\n\t\treturn ret + \"1\";\n}\nvar s = build_blank(50000) var time0 = Date.now();\nlo.trim(s) \nvar time_cost0 = Date.now()\t time0;\nconsole.log(\"time_cost0: \" + time_cost0);\nvar time1 = Date.now();\nlo.toNumber(s) var time_cost1 = Date.now()\t time1;\nconsole.log(\"time_cost1: \" + time_cost1);\nvar time2 = Date.now();\nlo.trimEnd(s);\nvar time_cost2 = Date.now()\t time2;\nconsole.log(\"time_cost2: \" + time_cost2);\n```\nUpgrade to version 4.17.21 or later", "related_urls": [], "occurrence_count": 798, "reachable_flows": 0}
{"id": "NPM-1095029", "package": "npm:diff", "purl": "pkg:npm/diff@1.4.0", "package_type": "npm", "package_usage": "required", "version": "1.4.0", "fix_version": "3.5.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service (ReDoS)\nA vulnerability was found in diff before v3.5.0, the affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\nUpgrade to version 3.5.0 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2018-1000620", "package": "npm:cryptiles", "purl": "pkg:npm/cryptiles@3.2.1", "package_type": "npm", "package_usage": "required", "version": "3.2.1", "fix_version": "4.1.2", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Insufficient Entropy in cryptiles\nVersions of `cryptiles` prior to 4.1.2 are vulnerable to Insufficient Entropy. The `randomDigits()` method does not provide sufficient entropy and its generates digits that are not evenly distributed.\n\n\n## Recommendation\n\nUpgrade to version 4.1.2. The package is deprecated and has been moved to `@hapi/cryptiles` and it is strongly recommended to use the maintained package.\nUpgrade to version 4.1.2 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2021-3918", "package": "npm:json-schema", "purl": "pkg:npm/json-schema@0.4.0", "package_type": "npm", "package_usage": "required", "version": "0.4.0", "fix_version": "0.4.0", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# json schema is vulnerable to Prototype Pollution\njson schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').\nUpgrade to version 0.4.0 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "NPM-1095058", "package": "npm:js-yaml", "purl": "pkg:npm/js-yaml@3.14.1", "package_type": "npm", "package_usage": "required", "version": "3.14.1", "fix_version": "3.13.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Code Injection in js yaml\nVersions of `js yaml` prior to 3.13.1 are vulnerable to Code Injection. The `load()` function may execute arbitrary code injected through a malicious YAML file. Objects that have `toString` as key, JavaScript code as value and are used as explicit mapping keys allow attackers to execute the supplied code through the `load()` function. The `safeLoad()` function is unaffected.\n\nAn example payload is \n`{ toString: !<tag:yaml.org,2002:js/function> 'function (){return Date.now()}' } : 1` \nwhich returns the object \n{\n\t\"1553107949161\": 1\n}\n\n\n## Recommendation\n\nUpgrade to version 3.13.1.\nUpgrade to version 3.13.1 or later", "related_urls": [], "occurrence_count": 10, "reachable_flows": 0}
{"id": "CVE-2022-29167", "package": "npm:hawk", "purl": "pkg:npm/hawk@6.0.2", "package_type": "npm", "package_usage": "required", "version": "6.0.2", "fix_version": "9.0.1", "severity": "HIGH", "cvss_score": "7.4", "short_description": "# Uncontrolled Resource Consumption in Hawk\nHawk is an HTTP authentication scheme providing mechanisms for making authenticated HTTP requests with partial cryptographic verification of the request and response, covering the HTTP method, request URI, host, and optionally the request payload. Hawk used a regular expression to parse `Host` HTTP header (`Hawk.utils.parseHost()`), which was subject to regular expression DoS attack\t meaning each added character in the attacker's input increases the computation time exponentially. `parseHost()` was patched in `9.0.1` to use built in `URL` class to parse hostname instead.`Hawk.authenticate()` accepts `options` argument. If that contains `host` and `port`, those would be used instead of a call to `utils.parseHost()`.\nUpgrade to version 9.0.1 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2020-28502", "package": "npm:xmlhttprequest-ssl", "purl": "pkg:npm/xmlhttprequest-ssl@1.5.5", "package_type": "npm", "package_usage": "required", "version": "1.5.5", "fix_version": "1.6.2", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# xmlhttprequest and xmlhttprequest ssl vulnerable to Arbitrary Code Injection\nThis affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest ssl. Provided requests are sent synchronously (`async=False` on `xhr.open`), malicious user input flowing into `xhr.send` could result in arbitrary code being injected and run.\nUpgrade to version 1.6.2 or later", "related_urls": [], "occurrence_count": 3, "reachable_flows": 0}
{"id": "CVE-2021-31597", "package": "npm:xmlhttprequest-ssl", "purl": "pkg:npm/xmlhttprequest-ssl@1.5.5", "package_type": "npm", "package_usage": "required", "version": "1.5.5", "fix_version": "1.6.2", "severity": "CRITICAL", "cvss_score": "9.4", "short_description": "# Improper Certificate Validation in xmlhttprequest ssl\nThe xmlhttprequest ssl package before 1.6.1 for Node.js disables SSL certificate validation by default, because rejectUnauthorized (when the property exists but is undefined) is considered to be false within the https.request function of Node.js. In other words, no certificate is ever rejected.\nUpgrade to version 1.6.1 or later", "related_urls": [], "occurrence_count": 3, "reachable_flows": 0}
{"id": "CVE-2021-23358", "package": "npm:underscore", "purl": "pkg:npm/underscore@1.4.4", "package_type": "npm", "package_usage": "required", "version": "1.4.4", "fix_version": "1.12.1", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Arbitrary Code Execution in underscore\nThe package `underscore` from 1.13.0 0 and before 1.13.0 2, from 1.3.2 and before 1.12.1 are vulnerable to Arbitrary Code Execution via the template function, particularly when a variable property is passed as an argument as it is not sanitized.\nUpgrade to version 1.12.1 or later", "related_urls": [], "occurrence_count": 11, "reachable_flows": 0}
{"id": "CVE-2021-33623", "package": "npm:trim-newlines", "purl": "pkg:npm/trim-newlines@1.0.0", "package_type": "npm", "package_usage": "required", "version": "1.0.0", "fix_version": "3.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled Resource Consumption in trim newlines\n@rkesters/gnuplot is an easy to use node module to draw charts using gnuplot and ps2pdf. The trim newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial of service (ReDoS) for the `.end()` method.\nUpgrade to version 3.0.1 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2020-8203", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.19", "severity": "HIGH", "cvss_score": "7.4", "short_description": "# Prototype Pollution in lodash\nVersions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The functions `pick`, `set`, `setWith`, `update`, `updateWith`, and `zipObjectDeep` allow a malicious user to modify the prototype of Object if the property identifiers are user supplied. Being affected by this issue requires manipulating objects based on user provided property values or arrays.\n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.\nUpgrade to version 4.17.19 or later", "related_urls": [], "occurrence_count": 798, "reachable_flows": 0}
{"id": "CVE-2020-36604", "package": "npm:hoek", "purl": "pkg:npm/hoek@4.3.1", "package_type": "npm", "package_usage": "required", "version": "4.3.1", "fix_version": null, "severity": "HIGH", "cvss_score": "8.1", "short_description": "# hoek subject to prototype pollution via the clone function.\nhoek versions prior to 8.5.1, and 9.x prior to 9.0.3 are vulnerable to prototype pollution in the clone function. If an object with the __proto__ key is passed to clone() the key is converted to a prototype. This issue has been patched in version 9.0.3, and backported to 8.5.1. \nNone", "related_urls": [], "occurrence_count": 10, "reachable_flows": 0}
{"id": "CVE-2020-7598", "package": "npm:minimist", "purl": "pkg:npm/minimist@1.2.6", "package_type": "npm", "package_usage": "required", "version": "1.2.6", "fix_version": "0.2.1", "severity": "MEDIUM", "cvss_score": "5.6", "short_description": "# Prototype Pollution in minimist\nAffected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.\t\nParsing the argument `\t__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `\t__proto__=Polluted` raises and uncaught error and crashes the application.\t\nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n\n\n## Recommendation\n\nUpgrade to versions 0.2.1, 1.2.3 or later.\nUpgrade to version 0.2.1 or later", "related_urls": [], "occurrence_count": 8, "reachable_flows": 0}
{"id": "CVE-2022-24999", "package": "npm:qs", "purl": "pkg:npm/qs@6.11.0", "package_type": "npm", "package_usage": "required", "version": "6.11.0", "fix_version": "6.2.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# qs vulnerable to Prototype Pollution\nqs before 6.10.3 allows attackers to cause a Node process hang because an `__ proto__` key can be used. In many typical web framework use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__ =b&a[__proto__ &a[length =100000000`. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4.\nUpgrade to version 6.2.4 or later", "related_urls": [], "occurrence_count": 10, "reachable_flows": 0}
{"id": "CVE-2022-3517", "package": "npm:minimatch", "purl": "pkg:npm/minimatch@3.1.2", "package_type": "npm", "package_usage": "required", "version": "3.1.2", "fix_version": "3.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# minimatch ReDoS vulnerability\nA vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.\nUpgrade to version 3.0.5 or later", "related_urls": [], "occurrence_count": 34, "reachable_flows": 0}
{"id": "CVE-2022-46175", "package": "npm:json5", "purl": "pkg:npm/json5@0.5.1", "package_type": "npm", "package_usage": "required", "version": "0.5.1", "fix_version": "1.0.2", "severity": "HIGH", "cvss_score": "7.1", "short_description": "# Prototype Pollution in JSON5 via Parse Method\nThe `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n```js\nconst JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) => {\n\tif (props.isAdmin) {\n\t\tconsole.log('Doing dangerous thing as admin.');\n\t} else {\n\t\tconsole.log('Doing dangerous thing as user.');\n\t}\n};\n\nconst secCheckKeysSet = (obj, searchKeys) => {\n\tlet searchKeyFound = false;\n\tObject.keys(obj).forEach((key) => {\n\t\tif (searchKeys.indexOf(key) >\t1) {\n\t\t\tsearchKeyFound = true;\n\t\t}\n\t});\n\treturn searchKeyFound;\n};\n\nconst props = JSON5.parse('{\"foo\": \"bar\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod' )) {\n\tdoSomethingDangerous(props); // \"Doing dangerous thing as user.\"\n} else {\n\tthrow new Error('Forbidden...');\n}\n```\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"isAdmin\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod' )) {\n\tdoSomethingDangerous(props);\n} else {\n\tthrow new Error('Forbidden...'); // Error: Forbidden...\n}\n```\n \nHowever, users can instead set the `__proto__` key to `{\"isAdmin\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"__proto__\": {\"isAdmin\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod' )) {\n\tdoSomethingDangerous(props); // \"Doing dangerous thing as admin.\"\n} else {\n\tthrow new Error('Forbidden...');\n}\n ```\nUpgrade to version 1.0.2 or later", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2023-28155", "package": "npm:request", "purl": "pkg:npm/request@2.85.0", "package_type": "npm", "package_usage": "required", "version": "2.85.0", "fix_version": null, "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "# Server Side Request Forgery in Request\nThe `request` package through 2.88.2 for Node.js and the `@cypress/request` package prior to 3.0.0 allow a bypass of SSRF mitigations via an attacker controller server that does a cross protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\n\nNOTE: The `request` package is no longer supported by the maintainer.\nNone", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2017-16137", "package": "npm:debug", "purl": "pkg:npm/debug@2.6.9", "package_type": "npm", "package_usage": "required", "version": "2.6.9", "fix_version": "2.6.9", "severity": "LOW", "cvss_score": "3.7", "short_description": "# Regular Expression Denial of Service in debug\nAffected versions of `debug` are vulnerable to regular expression denial of service when untrusted user input is passed into the `o` formatter. \n\nAs it takes 50,000 characters to block the event loop for 2 seconds, this issue is a low severity issue.\n\nThis was later re introduced in version v3.2.0, and then repatched in versions 3.2.7 and 4.3.1.\n\n## Recommendation\n\nVersion 2.x.x: Update to version 2.6.9 or later.\nVersion 3.1.x: Update to version 3.1.0 or later.\nVersion 3.2.x: Update to version 3.2.7 or later.\nVersion 4.x.x: Update to version 4.3.1 or later.\nUpgrade to version 2.6.9 or later", "related_urls": [], "occurrence_count": 107, "reachable_flows": 0}
{"id": "CVE-2023-45133", "package": "npm:babel-traverse", "purl": "pkg:npm/babel-traverse@6.26.0", "package_type": "npm", "package_usage": "required", "version": "6.26.0", "fix_version": null, "severity": "CRITICAL", "cvss_score": "9.4", "short_description": "# Babel vulnerable to arbitrary code execution when compiling specifically crafted malicious code\n### Impact\n\nUsing Babel to compile code that was specifically crafted by an attacker can lead to arbitrary code execution during compilation, when using plugins that rely on the `path.evaluate()`or `path.evaluateTruthy()` internal Babel methods.\n\nKnown affected plugins are:\n\t`@babel/plugin transform runtime`\n\t`@babel/preset env` when using its [`useBuiltIns` (https://babeljs.io/docs/babel preset env#usebuiltins) option\n\tAny \"polyfill provider\" plugin that depends on `@babel/helper define polyfill provider`, such as `babel plugin polyfill corejs3`, `babel plugin polyfill corejs2`, `babel plugin polyfill es shims`, `babel plugin polyfill regenerator`\n\nNo other plugins under the `@babel/` namespace are impacted, but third party plugins might be.\n\n**Users that only compile trusted code are not impacted.**\n\n### Patches\n\nThe vulnerability has been fixed in `@babel/traverse@7.23.2`.\n\nBabel 6 does not receive security fixes anymore (see [Babel's security policy (https://github.com/babel/babel/security/policy)), hence there is no patch planned for `babel traverse@6`.\n\n### Workarounds\n\n\tUpgrade `@babel/traverse` to v7.23.2 or higher. You can do this by deleting it from your package manager's lockfile and re installing the dependencies. `@babel/core` >=7.23.2 will automatically pull in a non vulnerable version.\n\tIf you cannot upgrade `@babel/traverse` and are using one of the affected packages mentioned above, upgrade them to their latest version to avoid triggering the vulnerable code path in affected `@babel/traverse` versions:\n\t\t`@babel/plugin transform runtime` v7.23.2\n\t\t`@babel/preset env` v7.23.2\n\t\t`@babel/helper define polyfill provider` v0.4.3\n\t\t`babel plugin polyfill corejs2` v0.4.6\n\t\t`babel plugin polyfill corejs3` v0.8.5\n\t\t`babel plugin polyfill es shims` v0.10.0\n\t\t`babel plugin polyfill regenerator` v0.5.3\nNone", "related_urls": [], "occurrence_count": 8, "reachable_flows": 0}
{"id": "CVE-2021-23337", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.21", "severity": "HIGH", "cvss_score": "7.2", "short_description": "# Command Injection in lodash\n`lodash` versions prior to 4.17.21 are vulnerable to Command Injection via the template function.\nUpgrade to version 4.17.21 or later", "related_urls": [], "occurrence_count": 798, "reachable_flows": 0}
{"id": "CVE-2022-2421", "package": "npm:socket.io-parser", "purl": "pkg:npm/socket.io-parser@3.1.3", "package_type": "npm", "package_usage": "required", "version": "3.1.3", "fix_version": "3.3.4", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Insufficient validation when decoding a Socket.IO packet\nDue to improper type validation in the `socket.io parser` library (which is used by the `socket.io` and `socket.io client` packages to encode and decode Socket.IO packets), it is possible to overwrite the _placeholder object which allows an attacker to place references to functions at arbitrary places in the resulting query object.\n\nExample:\n\n```js\nconst decoder = new Decoder();\n\ndecoder.on(\"decoded\", (packet) => {\n console.log(packet.data); // prints [ 'hello', [Function: splice\t \n})\n\ndecoder.add('51 [\"hello\",{\"_placeholder\":true,\"num\":\"splice\"} ');\ndecoder.add(Buffer.from(\"world\"));\n```\n\nThis bubbles up in the `socket.io` package:\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n // here, \"val\" could be a function instead of a buffer\n });\n});\n```\n\n:warning: IMPORTANT NOTE :warning:\n\nYou need to make sure that the payload that you received from the client is actually a `Buffer` object:\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n if (!Buffer.isBuffer(val)) {\n socket.disconnect();\n return;\n }\n // ...\n });\n});\n```\n\n**If that's already the case, then you are not impacted by this issue, and there is no way an attacker could make your server crash (or escalate privileges, ...).**\n\nExample of values that could be sent by a malicious user:\n\n\ta number that is out of bounds\n\nSample packet: `451 [\"hello\",{\"_placeholder\":true,\"num\":10} `\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n // val is `undefined`\n });\n});\n```\n\n\ta value that is not a number, like `undefined`\n\nSample packet: `451 [\"hello\",{\"_placeholder\":true,\"num\":undefined} `\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n // val is `undefined`\n });\n});\n```\n\n\ta string that is part of the prototype of `Array`, like \"push\"\n\nSample packet: `451 [\"hello\",{\"_placeholder\":true,\"num\":\"push\"} `\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n // val is a reference to the \"push\" function\n });\n});\n```\n\n\ta string that is part of the prototype of `Object`, like \"hasOwnProperty\"\n\nSample packet: `451 [\"hello\",{\"_placeholder\":true,\"num\":\"hasOwnProperty\"} `\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n // val is a reference to the \"hasOwnProperty\" function\n });\n});\n```\n\nThis should be fixed by:\n\n\thttps://github.com/socketio/socket.io parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050, included in `socket.io parser@4.2.1`\n\thttps://github.com/socketio/socket.io parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4, included in `socket.io parser@4.0.5`\n\thttps://github.com/socketio/socket.io parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14, included in `socket.io parser@3.4.2`\n\thttps://github.com/socketio/socket.io parser/commit/fb21e422fc193b34347395a33e0f625bebc09983, included in `socket.io parser@3.3.3`\n\n### Dependency analysis for the `socket.io` package\n\n| `socket.io` version | `socket.io parser` version | Covered? |\n|\t\t\t\t\t\t\t\t\t\t |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\t\t\t\t\t\t\t\t\t\t\t\t|\n| `4.5.2...latest` | `~4.2.0` ([ref (https://github.com/socketio/socket.io/commit/9890b036cf942f6b6ad2afeb6a8361c32cd5d528)) | Yes :heavy_check_mark: |\n| `4.1.3...4.5.1` | `~4.0.4` ([ref (https://github.com/socketio/socket.io/commit/7c44893d7878cd5bba1eff43150c3e664f88fb57)) | Yes :heavy_check_mark: |\n| `3.0.5...4.1.2` | `~4.0.3` ([ref (https://github.com/socketio/socket.io/commit/752dfe3b1e5fecda53dae899b4a39e6fed5a1a17)) | Yes :heavy_check_mark: |\n| `3.0.0...3.0.4` | `~4.0.1` ([ref (https://github.com/socketio/socket.io/commit/1af3267e3f5f7884214cf2ca4d5282d620092fb0)) | Yes :heavy_check_mark: |\n| `2.3.0...2.5.0` | `~3.4.0` ([ref (https://github.com/socketio/socket.io/commit/cf39362014f5ff13a17168b74772c43920d6e4fd)) | Yes :heavy_check_mark: |\n\n\n### Dependency analysis for the `socket.io client` package\n\n| `socket.io client` version | `socket.io parser` version | Covered? |\n|\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `4.5.0...latest` | `~4.2.0` ([ref (https://github.com/socketio/socket.io client/commit/b862924b7f1720979e5db2f0154906b305d420e3)) | Yes :heavy_check_mark: |\n| `4.3.0...4.4.1` | `~4.1.1` ([ref (https://github.com/socketio/socket.io client/commit/91b948b8607166fcc79f028a6428819277214188)) | No, but the impact is very limited |\n| `3.1.0...4.2.0` | `~4.0.4` ([ref (https://github.com/socketio/socket.io client/commit/5d9b4eb42b1f5778e6f033096694acb331b132c4)) | Yes :heavy_check_mark: |\n| `3.0.5` | `~4.0.3` ([ref (https://github.com/socketio/socket.io client/commit/cf9fc358365cc15a41260a51dc186c881bf086ca)) | Yes :heavy_check_mark: |\n| `3.0.0...3.0.4` | `~4.0.1` ([ref (https://github.com/socketio/socket.io client/commit/b7e07ba633ceb9c1dc94cc894c10b9bfca536c7a)) | Yes :heavy_check_mark: |\n| `2.2.0...2.5.0` | `~3.3.0` ([ref (https://github.com/socketio/socket.io client/commit/06e9a4ca2621176c30c352b2ba8b34fa42b8d0ba)) | Yes :heavy_check_mark: |\n\nUpgrade to version 3.3.3 or later", "related_urls": [], "occurrence_count": 7, "reachable_flows": 0}
{"id": "CVE-2019-10744", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.12", "severity": "CRITICAL", "cvss_score": "9.1", "short_description": "# Prototype Pollution in lodash\nVersions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.\tThe function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n## Recommendation\n\nUpdate to version 4.17.12 or later.\nUpgrade to version 4.17.12 or later", "related_urls": [], "occurrence_count": 798, "reachable_flows": 0}
{"id": "CVE-2019-11358", "package": "npm:jquery", "purl": "pkg:npm/jquery@3.2.1", "package_type": "npm", "package_usage": "required", "version": "3.2.1", "fix_version": "3.5.0", "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "# XSS in jQuery as used in Drupal, Backdrop CMS, and other products\njQuery from 1.1.4 until 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles `jQuery.extend(true, {}, ...)` because of `Object.prototype` pollution. If an unsanitized source object contained an enumerable `__proto__` property, it could extend the native `Object.prototype`.\nUpgrade to version 3.4.0 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2020-11023", "package": "npm:jquery", "purl": "pkg:npm/jquery@3.2.1", "package_type": "npm", "package_usage": "required", "version": "3.2.1", "fix_version": "3.5.0", "severity": "MEDIUM", "cvss_score": "6.9", "short_description": "# Potential XSS vulnerability in jQuery\n### Impact\nPassing HTML containing `<option>` elements from untrusted sources\t even after sanitizing them\t to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\n\n### Patches\nThis problem is patched in jQuery 3.5.0.\n\n### Workarounds\nTo workaround this issue without upgrading, use [DOMPurify (https://github.com/cure53/DOMPurify) with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n### References\nhttps://blog.jquery.com/2020/04/10/jquery 3 5 0 released/\n\n### For more information\nIf you have any questions or comments about this advisory, search for a relevant issue in [the jQuery repo (https://github.com/jquery/jquery/issues). If you don't find an answer, open a new issue.\nUpgrade to version 3.5.0 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2021-44906", "package": "npm:minimist", "purl": "pkg:npm/minimist@1.2.6", "package_type": "npm", "package_usage": "required", "version": "1.2.6", "fix_version": "0.2.4", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Prototype Pollution in minimist\nMinimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file `index.js`, function `setKey()` (lines 69 95).\nUpgrade to version 0.2.4 or later", "related_urls": [], "occurrence_count": 8, "reachable_flows": 0}
{"id": "CVE-2023-26136", "package": "npm:tough-cookie", "purl": "pkg:npm/tough-cookie@2.3.4", "package_type": "npm", "package_usage": "required", "version": "2.3.4", "fix_version": "4.1.3", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# tough cookie Prototype Pollution vulnerability\nVersions of the package tough cookie before 4.1.3 are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. This issue arises from the manner in which the objects are initialized.\nUpgrade to version 4.1.3 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2023-32695", "package": "npm:socket.io-parser", "purl": "pkg:npm/socket.io-parser@3.1.3", "package_type": "npm", "package_usage": "required", "version": "3.1.3", "fix_version": "3.3.4", "severity": "HIGH", "cvss_score": "7.3", "short_description": "# Insufficient validation when decoding a Socket.IO packet\n### Impact\n\nA specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process.\n\n```\nTypeError: Cannot convert object to primitive value\n\t\t\t at Socket.emit (node:events:507:25)\n\t\t\t at .../node_modules/socket.io/lib/socket.js:531:14\n```\n\n### Patches\n\nA fix has been released today (2023/05/22):\n\n\thttps://github.com/socketio/socket.io parser/commit/3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3, included in `socket.io parser@4.2.3`\n\thttps://github.com/socketio/socket.io parser/commit/2dc3c92622dad113b8676be06f23b1ed46b02ced, included in `socket.io parser@3.4.3`\n\n\nAnother fix has been released for the `3.3.x` branch:\n\n\thttps://github.com/socketio/socket.io parser/commit/ee006607495eca4ec7262ad080dd3a91439a5ba4, included in `socket.io parser@3.3.4\n\n| `socket.io` version | `socket.io parser` version\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t| Needs minor update?\t\t\t\t\t\t\t\t\t|\n|\t\t\t\t\t\t\t\t\t\t |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `4.5.2...latest`\t\t| `~4.2.0` ([ref (https://github.com/socketio/socket.io/commit/9890b036cf942f6b6ad2afeb6a8361c32cd5d528)) | `npm audit fix` should be sufficient |\n| `4.1.3...4.5.1`\t\t | `~4.1.1` ([ref (https://github.com/socketio/socket.io/commit/7c44893d7878cd5bba1eff43150c3e664f88fb57)) | Please upgrade to `socket.io@4.6.x`\t|\n| `3.0.5...4.1.2`\t\t | `~4.0.3` ([ref (https://github.com/socketio/socket.io/commit/752dfe3b1e5fecda53dae899b4a39e6fed5a1a17)) | Please upgrade to `socket.io@4.6.x`\t|\n| `3.0.0...3.0.4`\t\t | `~4.0.1` ([ref (https://github.com/socketio/socket.io/commit/1af3267e3f5f7884214cf2ca4d5282d620092fb0)) | Please upgrade to `socket.io@4.6.x`\t|\n| `2.3.0...2.5.0`\t\t | `~3.4.0` ([ref (https://github.com/socketio/socket.io/commit/cf39362014f5ff13a17168b74772c43920d6e4fd)) | `npm audit fix` should be sufficient |\n\n\n### Workarounds\n\nThere is no known workaround except upgrading to a safe version.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n\tOpen a discussion [here (https://github.com/socketio/socket.io/discussions)\n\nThanks to [@rafax00 (https://github.com/rafax00) for the responsible disclosure.\n\nUpgrade to version 3.3.4 or later", "related_urls": [], "occurrence_count": 7, "reachable_flows": 0}
{"id": "CVE-2024-37890", "package": "npm:ws", "purl": "pkg:npm/ws@3.3.3", "package_type": "npm", "package_usage": "required", "version": "3.3.3", "fix_version": "5.2.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# ws affected by a DoS when handling a request with many HTTP headers\n### Impact\n\nA request with a number of headers exceeding the[`server.maxHeadersCount` [\tthreshold could be used to crash a ws server.\n\n### Proof of concept\n\n```js\nconst http = require('http');\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 0 }, function () {\n\tconst chars = \"!#$%&'*+ .0123456789abcdefghijklmnopqrstuvwxyz _`|~\".split('');\n\tconst headers = {};\n\tlet count = 0;\n\n\tfor (let i = 0; i < chars.length; i++) {\n\t\tif (count === 2000) break;\n\n\t\tfor (let j = 0; j < chars.length; j++) {\n\t\t\tconst key = chars[i\t+ chars[j ;\n\t\t\theaders[key\t= 'x';\n\n\t\t\tif (++count === 2000) break;\n\t\t}\n\t}\n\n\theaders.Connection = 'Upgrade';\n\theaders.Upgrade = 'websocket';\n\theaders['Sec WebSocket Key'\t= 'dGhlIHNhbXBsZSBub25jZQ==';\n\theaders['Sec WebSocket Version'\t= '13';\n\n\tconst request = http.request({\n\t\theaders: headers,\n\t\thost: '127.0.0.1',\n\t\tport: wss.address().port\n\t});\n\n\trequest.end();\n});\n```\n\n### Patches\n\nThe vulnerability was fixed in ws@8.17.1 (https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c) and backported to ws@7.5.10 (https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f), ws@6.2.3 (https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63), and ws@5.2.4 (https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e)\n\n### Workarounds\n\nIn vulnerable versions of ws, the issue can be mitigated in the following ways:\n\n1. Reduce the maximum allowed length of the request headers using the [`\tmax http header size=size` [\tand/or the [`maxHeaderSize` [\toptions so that no more headers than the `server.maxHeadersCount` limit can be sent.\n2. Set `server.maxHeadersCount` to `0` so that no limit is applied.\n\n### Credits\n\nThe vulnerability was reported by [Ryan LaPointe (https://github.com/rrlapointe) in https://github.com/websockets/ws/issues/2230.\n\n### References\n\n\thttps://github.com/websockets/ws/issues/2230\n\thttps://github.com/websockets/ws/pull/2231\n\n[`\tmax http header size=size` : https://nodejs.org/api/cli.html#\tmax http header sizesize\n[`maxHeaderSize` : https://nodejs.org/api/http.html#httpcreateserveroptions requestlistener\n[`server.maxHeadersCount` : https://nodejs.org/api/http.html#servermaxheaderscount\n\nUpgrade to version 5.2.4 or later", "related_urls": [], "occurrence_count": 3, "reachable_flows": 0}
{"id": "CVE-2024-38355", "package": "npm:socket.io", "purl": "pkg:npm/socket.io@2.0.3", "package_type": "npm", "package_usage": "required", "version": "2.0.3", "fix_version": "2.5.1", "severity": "HIGH", "cvss_score": "7.3", "short_description": "# socket.io has an unhandled 'error' event\n### Impact\n\nA specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process.\n\n```\nnode:events:502\n\t\tthrow err; // Unhandled 'error' event\n\t\t \n\nError [ERR_UNHANDLED_ERROR : Unhandled error. (undefined)\n\t\tat new NodeError (node:internal/errors:405:5)\n\t\tat Socket.emit (node:events:500:17)\n\t\tat /myapp/node_modules/socket.io/lib/socket.js:531:14\n\t\tat process.processTicksAndRejections (node:internal/process/task_queues:77:11) {\n\tcode: 'ERR_UNHANDLED_ERROR',\n\tcontext: undefined\n}\n```\n\n### Affected versions\n\n| Version range\t\t| Needs minor update?\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n|\t\t\t\t\t\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `4.6.2...latest` | Nothing to do\t\t\t\t\t\t\t |\n| `3.0.0...4.6.1`\t| Please upgrade to `socket.io@4.6.2` (at least) |\n| `2.3.0...2.5.0`\t| Please upgrade to `socket.io@2.5.1`\t\t\t\t\t\t|\n\n### Patches\n\nThis issue is fixed by https://github.com/socketio/socket.io/commit/15af22fc22bc6030fcead322c106f07640336115, included in `socket.io@4.6.2` (released in May 2023).\n\nThe fix was backported in the 2.x branch today: https://github.com/socketio/socket.io/commit/d30630ba10562bf987f4d2b42440fc41a828119c\n\n### Workarounds\n\nAs a workaround for the affected versions of the `socket.io` package, you can attach a listener for the \"error\" event:\n\n```js\nio.on(\"connection\", (socket) => {\n\tsocket.on(\"error\", () => {\n\t\t// ...\n\t});\n});\n```\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n\tOpen a discussion [here (https://github.com/socketio/socket.io/discussions)\n\nThanks a lot to [Paul Taylor (https://github.com/Y0ursTruly) for the responsible disclosure.\n\n### References\n\n\thttps://github.com/socketio/socket.io/commit/15af22fc22bc6030fcead322c106f07640336115\n\thttps://github.com/socketio/socket.io/commit/d30630ba10562bf987f4d2b42440fc41a828119c\n\nUpgrade to version 2.5.1 or later", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2022-25883", "package": "npm:semver", "purl": "pkg:npm/semver@7.5.2", "package_type": "npm", "package_usage": "required", "version": "7.5.2", "fix_version": "5.7.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# semver vulnerable to Regular Expression Denial of Service\nVersions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\nUpgrade to version 5.7.2 or later", "related_urls": [], "occurrence_count": 14, "reachable_flows": 0}
{"id": "CVE-2024-29415", "package": "npm:ip", "purl": "pkg:npm/ip@1.1.9", "package_type": "npm", "package_usage": "required", "version": "1.1.9", "fix_version": null, "severity": "HIGH", "cvss_score": "8.1", "short_description": "# ip SSRF improper categorization in isPublic\nThe ip package through 2.0.1 for Node.js might allow SSRF because some IP addresses (such as 127.1, 01200034567, 012.1.2.3, 000:0:0000::01, and ::fFFf:127.0.0.1) are improperly categorized as globally routable via isPublic. NOTE: this issue exists because of an incomplete fix for CVE 2023 42282.\nNone", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2024-45590", "package": "npm:body-parser", "purl": "pkg:npm/body-parser@1.20.2", "package_type": "npm", "package_usage": "required", "version": "1.20.2", "fix_version": "1.20.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# body parser vulnerable to denial of service when url encoding is enabled\n### Impact\n\nbody parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service.\n\n### Patches\n\nthis issue is patched in 1.20.3\n\n### References\n\nUpgrade to version 1.20.3 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2024-43799", "package": "npm:send", "purl": "pkg:npm/send@0.18.0", "package_type": "npm", "package_usage": "required", "version": "0.18.0", "fix_version": "0.19.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# send vulnerable to template injection that can lead to XSS\n### Impact\n\npassing untrusted user input\t even after sanitizing it\t to `SendStream.redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in send 0.19.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n\nUpgrade to version 0.19.0 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2024-43800", "package": "npm:serve-static", "purl": "pkg:npm/serve-static@1.15.0", "package_type": "npm", "package_usage": "required", "version": "1.15.0", "fix_version": "1.16.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# serve static vulnerable to template injection that can lead to XSS\n### Impact\n\npassing untrusted user input\t even after sanitizing it\t to `redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in serve static 1.16.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n\nUpgrade to version 1.16.0 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2024-43796", "package": "npm:express", "purl": "pkg:npm/express@4.19.2", "package_type": "npm", "package_usage": "required", "version": "4.19.2", "fix_version": "4.20.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# express vulnerable to XSS via response.redirect()\n### Impact\n\nIn express <4.20.0, passing untrusted user input\t even after sanitizing it\t to `response.redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in express 4.20.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n\nUpgrade to version 4.20.0 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2024-45296", "package": "npm:path-to-regexp", "purl": "pkg:npm/path-to-regexp@0.1.7", "package_type": "npm", "package_usage": "required", "version": "0.1.7", "fix_version": "1.9.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# path to regexp outputs backtracking regular expressions\n### Impact\n\nA bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (`.`). For example, `/:a :b`.\n\n### Patches\n\nFor users of 0.1, upgrade to `0.1.10`. All other users should upgrade to `8.0.0`.\n\nThese versions add backtrack protection when a custom regex pattern is not provided:\n\n\t[0.1.10 (https://github.com/pillarjs/path to regexp/releases/tag/v0.1.10)\n\t[1.9.0 (https://github.com/pillarjs/path to regexp/releases/tag/v1.9.0)\n\t[3.3.0 (https://github.com/pillarjs/path to regexp/releases/tag/v3.3.0)\n\t[6.3.0 (https://github.com/pillarjs/path to regexp/releases/tag/v6.3.0)\n\nThey do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.\n\nVersion [7.1.0 (https://github.com/pillarjs/path to regexp/releases/tag/v7.1.0) can enable `strict: true` and get an error when the regular expression might be bad.\n\nVersion [8.0.0 (https://github.com/pillarjs/path to regexp/releases/tag/v8.0.0) removes the features that can cause a ReDoS.\n\n### Workarounds\n\nAll versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change `/:a :b` to `/:a :b([\t/ +)`.\n\nIf paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.\n\n### Details\n\nUsing `/:a :b` will produce the regular expression `/\t/([\t/ +?) ([\t/ +?) /?$/`. This can be exploited by a path such as `/a${' a'.repeat(8_000)}/a`. [OWASP (https://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS) has a good example of why this occurs, but the TL;DR is the `/a` at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the `:a :b` on the repeated 8,000 ` a`.\n\nBecause JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.\n\n### References\n\n* [OWASP (https://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS)\n* [Detailed blog post (https://blakeembrey.com/posts/2024 09 web redos/)\nUpgrade to version 1.9.0 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "GHSA-2pr6-76vf-7546", "package": "npm:js-yaml", "purl": "pkg:npm/js-yaml@3.14.1", "package_type": "npm", "package_usage": "required", "version": "3.14.1", "fix_version": "3.13.0", "severity": "MEDIUM", "cvss_score": "5.9", "short_description": "# Denial of Service in js-yaml\nVersions of `js-yaml` prior to 3.13.0 are vulnerable to Denial of Service. By parsing a carefully-crafted YAML file, the node process stalls and may exhaust system resources leading to a Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 3.13.0.", "related_urls": ["https://github.com/nodeca/js-yaml/issues/475", "https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235", "https://snyk.io/vuln/SNYK-JS-JSYAML-173999", "https://www.npmjs.com/advisories/788", "https://www.npmjs.com/advisories/788/versions"], "occurrence_count": 10, "reachable_flows": 0}
{"id": "GHSA-8j8c-7jfh-h6hx", "package": "npm:js-yaml", "purl": "pkg:npm/js-yaml@3.14.1", "package_type": "npm", "package_usage": "required", "version": "3.14.1", "fix_version": "3.13.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Code Injection in js-yaml\nVersions of `js-yaml` prior to 3.13.1 are vulnerable to Code Injection. The `load()` function may execute arbitrary code injected through a malicious YAML file. Objects that have `toString` as key, JavaScript code as value and are used as explicit mapping keys allow attackers to execute the supplied code through the `load()` function. The `safeLoad()` function is unaffected.\n\nAn example payload is \n`{ toString: !<tag:yaml.org,2002:js/function> 'function (){return Date.now()}' } : 1` \nwhich returns the object \n{\n\t\"1553107949161\": 1\n}\n\n\n## Recommendation\n\nUpgrade to version 3.13.1.", "related_urls": ["https://github.com/nodeca/js-yaml/pull/480", "https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61", "https://www.npmjs.com/advisories/813"], "occurrence_count": 10, "reachable_flows": 0}
{"id": "GHSA-wxhq-pm8v-cw75", "package": "npm:clean-css", "purl": "pkg:npm/clean-css@3.4.28", "package_type": "npm", "package_usage": "required", "version": "3.4.28", "fix_version": "4.1.11", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Regular Expression Denial of Service in clean-css\nVersion of `clean-css` prior to 4.1.11 are vulnerable to Regular Expression Denial of Service (ReDoS). Untrusted input may cause catastrophic backtracking while matching regular expressions. This can cause the application to be unresponsive leading to Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 4.1.11 or higher.", "related_urls": ["https://github.com/jakubpawlowicz/clean-css/commit/2929bafbf8cdf7dccb24e0949c70833764fa87e3", "https://www.npmjs.com/advisories/785"], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2018-3739", "package": "npm:https-proxy-agent", "purl": "pkg:npm/https-proxy-agent@1.0.0", "package_type": "npm", "package_usage": "required", "version": "1.0.0", "fix_version": "2.2.3", "severity": "CRITICAL", "cvss_score": "9.1", "short_description": "# Denial of Service in https-proxy-agent\nVersions of `https-proxy-agent` before 2.2.0 are vulnerable to denial of service. This is due to unsanitized options (proxy.auth) being passed to `Buffer()`.\n\n\n## Recommendation\n\nUpdate to version 2.2.0 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2018-3736", "https://github.com/TooTallNate/node-https-proxy-agent/commit/1c24219df87524e6ed973127e81f30801d658f07", "https://hackerone.com/reports/319532", "https://github.com/TooTallNate/node-https-proxy-agent", "https://github.com/advisories/GHSA-8g7p-74h8-hg48", "https://www.npmjs.com/advisories/593"], "occurrence_count": 2, "reachable_flows": 0}
{"id": "GHSA-8w57-jfpm-945m", "package": "npm:http-proxy-agent", "purl": "pkg:npm/http-proxy-agent@1.0.0", "package_type": "npm", "package_usage": "required", "version": "1.0.0", "fix_version": "2.1.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Denial of Service in http-proxy-agent\nVersions of `http-proxy-agent` before 2.1.0 are vulnerable to denial of service and uninitialized memory leak when unsanitized options are passed to `Buffer`. An attacker may leverage these unsanitized options to consume system resources.\n\n\n## Recommendation\n\nUpdate to version 2.1.0 or later.", "related_urls": ["https://hackerone.com/reports/321631", "https://github.com/TooTallNate/node-http-proxy-agent/blob/2.0.0/index.js#L80", "https://www.npmjs.com/advisories/607"], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2020-15366", "package": "npm:ajv", "purl": "pkg:npm/ajv@5.5.2", "package_type": "npm", "package_usage": "required", "version": "5.5.2", "fix_version": "6.12.3", "severity": "MEDIUM", "cvss_score": "5.6", "short_description": "# Prototype Pollution in Ajv\nAn issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2020-15366", "https://github.com/ajv-validator/ajv/commit/65b2f7d76b190ac63a0d4e9154c712d7aa37049f", "https://github.com/ajv-validator/ajv", "https://github.com/ajv-validator/ajv/releases/tag/v6.12.3", "https://github.com/ajv-validator/ajv/tags", "https://hackerone.com/bugs?subject=user&report_id=894259", "https://security.netapp.com/advisory/ntap-20240621-0007"], "occurrence_count": 6, "reachable_flows": 0}
{"id": "CVE-2019-10196", "package": "npm:http-proxy-agent", "purl": "pkg:npm/http-proxy-agent@1.0.0", "package_type": "npm", "package_usage": "required", "version": "1.0.0", "fix_version": "2.1.0", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Resource Exhaustion Denial of Service in http-proxy-agent \nA flaw was found in http-proxy-agent, prior to version 2.1.0. It was discovered http-proxy-agent passes an auth option to the Buffer constructor without proper sanitization. This could result in a Denial of Service through the usage of all available CPU resources and data exposure through an uninitialized memory leak in setups where an attacker could submit typed input to the auth parameter.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2019-10196", "https://github.com/TooTallNate/node-http-proxy-agent/commit/b7b7cc793c3226aa83f820ce5c277e81862d32eb", "https://bugzilla.redhat.com/show_bug.cgi?id=1567245", "https://www.npmjs.com/advisories/607"], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2018-3721", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.5", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Prototype Pollution in lodash\nVersions of `lodash` before 4.17.5 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.17.5 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2018-3721", "https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a", "https://hackerone.com/reports/310443", "https://github.com/advisories/GHSA-fvqr-27wr-82fm", "https://security.netapp.com/advisory/ntap-20190919-0004", "https://www.npmjs.com/advisories/577"], "occurrence_count": 798, "reachable_flows": 0}
{"id": "CVE-2021-3807", "package": "npm:ansi-regex", "purl": "pkg:npm/ansi-regex@2.1.1", "package_type": "npm", "package_usage": "required", "version": "2.1.1", "fix_version": "3.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in chalk/ansi-regex\nansi-regex is vulnerable to Inefficient Regular Expression Complexity which could lead to a denial of service when parsing invalid ANSI escape codes.\n\n**Proof of Concept**\n```js\nimport ansiRegex from 'ansi-regex';\nfor(var i = 1; i <= 50000; i++) {\n\t\tvar time = Date.now();\n\t\tvar attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\n\t\tansiRegex().test(attack_str)\n\t\tvar time_cost = Date.now() - time;\n\t\tconsole.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\n}\n```\nThe ReDOS is mainly due to the sub-patterns `[[\\]()#;?]*` and `(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*`", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2021-3807", "https://github.com/chalk/ansi-regex/issues/38#issuecomment-924086311", "https://github.com/chalk/ansi-regex/issues/38#issuecomment-925924774", "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1", "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a", "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9", "https://github.com/chalk/ansi-regex/commit/c3c0b3f2736b9c01feec0fef33980c43720dcde8", "https://app.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908", "https://github.com/chalk/ansi-regex", "https://github.com/chalk/ansi-regex/releases/tag/v6.0.1", "https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994", "https://security.netapp.com/advisory/ntap-20221014-0002", "https://www.oracle.com/security-alerts/cpuapr2022.html"], "occurrence_count": 12, "reachable_flows": 0}
{"id": "GHSA-h6ch-v84p-w6p9", "package": "npm:diff", "purl": "pkg:npm/diff@1.4.0", "package_type": "npm", "package_usage": "required", "version": "1.4.0", "fix_version": "3.5.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service (ReDoS)\nA vulnerability was found in diff before v3.5.0, the affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.", "related_urls": ["https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0", "https://bugzilla.redhat.com/show_bug.cgi?id=1552148", "https://snyk.io/vuln/npm:diff:20180305", "https://www.npmjs.com/advisories/1631", "https://www.whitesourcesoftware.com/vulnerability-database/WS-2018-0590"], "occurrence_count": 2, "reachable_flows": 0}
{"id": "GHSA-pc5p-h8pf-mvwp", "package": "npm:https-proxy-agent", "purl": "pkg:npm/https-proxy-agent@1.0.0", "package_type": "npm", "package_usage": "required", "version": "1.0.0", "fix_version": "2.2.3", "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "# Machine-In-The-Middle in https-proxy-agent\nVersions of `https-proxy-agent` prior to 2.2.3 are vulnerable to Machine-In-The-Middle. The package fails to enforce TLS on the socket if the proxy server responds the to the request with a HTTP status different than 200. This allows an attacker with access to the proxy server to intercept unencrypted communications, which may include sensitive information such as credentials.\n\n\n## Recommendation\n\nUpgrade to version 3.0.0 or 2.2.3.", "related_urls": ["https://github.com/TooTallNate/node-https-proxy-agent/commit/36d8cf509f877fa44f4404fce57ebaf9410fe51b", "https://hackerone.com/reports/541502", "https://snyk.io/vuln/SNYK-JS-HTTPSPROXYAGENT-469131", "https://www.npmjs.com/advisories/1184"], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2021-43138", "package": "npm:async", "purl": "pkg:npm/async@2.6.4", "package_type": "npm", "package_usage": "required", "version": "2.6.4", "fix_version": "2.6.4", "severity": "HIGH", "cvss_score": "7.8", "short_description": "# Prototype Pollution in async\nA vulnerability exists in Async through 3.2.1 for 3.x and through 2.6.3 for 2.x (fixed in 3.2.2 and 2.6.4), which could let a malicious user obtain privileges via the `mapValues()` method.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2021-43138", "https://github.com/caolan/async/pull/1828", "https://github.com/caolan/async/commit/8f7f90342a6571ba1c197d747ebed30c368096d2", "https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d", "https://github.com/caolan/async", "https://github.com/caolan/async/blob/master/lib/internal/iterator.js", "https://github.com/caolan/async/blob/master/lib/mapValuesLimit.js", "https://github.com/caolan/async/blob/v2.6.4/CHANGELOG.md#v264", "https://github.com/caolan/async/compare/v2.6.3...v2.6.4", "https://jsfiddle.net/oz5twjd9", "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/MTEUUTNIEBHGKUKKLNUZSV7IEP6IP3Q3", "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/UM6XJ73Q3NAM5KSGCOKJ2ZIA6GUWUJLK", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MTEUUTNIEBHGKUKKLNUZSV7IEP6IP3Q3", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UM6XJ73Q3NAM5KSGCOKJ2ZIA6GUWUJLK", "https://security.netapp.com/advisory/ntap-20240621-0006"], "occurrence_count": 71, "reachable_flows": 0}
{"id": "GHSA-v2p6-4mp7-3r9v", "package": "npm:underscore.string", "purl": "pkg:npm/underscore.string@3.2.3", "package_type": "npm", "package_usage": "required", "version": "3.2.3", "fix_version": "3.3.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in underscore.string\nVersions of `underscore.string` prior to *3.3.5* are vulnerable to Regular Expression Denial of Service (ReDoS).\n\nThe function `unescapeHTML` is vulnerable to ReDoS due to an overly-broad regex. The slowdown is approximately 2s for 50,000 characters but grows exponentially with larger inputs.\n\n\n## Recommendation\n\nUpgrade to version 3.3.5 or higher.", "related_urls": ["https://github.com/epeli/underscore.string/issues/510", "https://github.com/epeli/underscore.string/pull/517", "https://github.com/epeli/underscore.string/commit/f486cd684c94c12db48b45d52b1472a1b9661029", "https://www.npmjs.com/advisories/745"], "occurrence_count": 3, "reachable_flows": 0}
